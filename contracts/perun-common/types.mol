import blockchain;

/* Perun Types */
array SEC1EncodedPubKey [byte; 65];

array Balances [Uint128; 2];

array True [byte; 1];
array False [byte; 1];

union Bool {
  True,
  False,
}

array A [byte; 1];
array B [byte; 1];

union ParticipantIndex {
  A,
  B,
}

option App (Bytes);

table Participant {
  // unlock_args is the lock-script args which identify this channel participant.
  // Specifically, this could be the payment args of this participant for a secp256k1_blake160_sighash_all script.
  unlock_args: Bytes,
  // payment_args is the lock-script args which must be used to pay out to this participant in the args field
  // of an output with the payment_lock_hash agreed upon in the ChannelConstants.
  payment_args: Bytes,
  pub_key: SEC1EncodedPubKey,
}
table ChannelParameters {
  party_a: Participant,
  party_b: Participant,
  nonce:        Byte32,
  challenge_duration: Uint64,
  // The default should be NoApp!
  app: App,
  // This should always be set to true for, as we currently only support ledger channels.
  is_ledger_channel: Bool,
  // This should always be set to false for, as we currently do not support virtual channels.
  is_virtual_channel: Bool,
}

table ChannelConstants {
  params: ChannelParameters,
  // pfls_hash specifies the lock_script that guards funds for this channel.
  // Specifically, this should be the perun-funding-lockscript.
  pfls_hash:     Byte32,
  // pcls_hash specifies the lock_script used for this channel.
  // Specifically, this should be the perun-channel-lockscript.
  pcls_hash:     Byte32,
  // pcls_unlock_script_hash specifies the unlock script that must be present for the pcls to allow a transaction to interact with the channel.
  pcls_unlock_script_hash: Byte32,
  // payment_lock_hash specifies the script used to pay out channel participants
  payment_lock_hash: Byte32,
  thread_token: ChannelToken,
}


table Fund {
  index: ParticipantIndex,
}
array Abort [byte; 1];

table Dispute {
  sig_a: Bytes,
  sig_b: Bytes,
}
table Close {
  state: ChannelState,
  sig_a: Bytes,
  sig_b: Bytes,
}
array ForceClose [byte; 1];


union ChannelWitness {
  Fund,
  Abort,
  Dispute,
  Close,
  ForceClose,
}

table ChannelState {
  // 
  channel_id: Byte32,
  balances: Balances,
  version: Uint64,
  is_final: Bool,
} 

table ChannelStatus {
  state: ChannelState,
  funded: Bool,
  funding: Balances,
  disputed: Bool,
}

struct ChannelToken {
  out_point: OutPoint,
}

struct PFLSArgs {
  pcts_hash: Byte32,
  thread_token: ChannelToken,
}